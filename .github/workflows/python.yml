name: 'CI: Python'
on:
  workflow_dispatch:
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'
  release:
    types: ['released', 'prereleased']

jobs:
  build-linux:
    strategy:
      matrix:
        host: [ubuntu-22.04-skylake]
    runs-on: ubuntu-22.04
    env:
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
    steps:
    # Git clone
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    # Tools
    - name: Install tools
      run: |
        sudo apt install -y ccache ninja-build python3-dev
    # Ccache
    - name: Prepare ccache directory
      id: ccache
      run: |
        echo "CCACHE_DIR=${{ runner.temp }}/.ccache" >> "$GITHUB_ENV"
        echo "ccache-dir=${{ runner.temp }}/.ccache" >> "$GITHUB_OUTPUT"
        mkdir -p "${{ runner.temp }}/.ccache"
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ steps.ccache.outputs.ccache-dir }}
        key: ${{ runner.os }}-python-${{ matrix.host }}-ccache-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-python-${{ matrix.host }}-ccache
        save-always: true
    # Conan
    - name: Install Conan
      id: conan
      run: |
        python3.10 -m pip install -U pip conan build
        echo "conan-home=$(conan config home)" >> "$GITHUB_OUTPUT"
    - name: Cache Conan
      uses: actions/cache@v4
      with:
        path: ${{ steps.conan.outputs.conan-home }}
        key: ${{ runner.os }}-python-${{ matrix.host }}-conan-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-python-${{ matrix.host }}-conan
        save-always: true
    - name: Conan detect
      run: |
        conan --version
        conan profile detect --force
    - name: Conan config
      run: |
        cat > settings_user.yml << EOF
        os:
          Linux:
            glibc: [null, ANY]
        arch: [skylake]
        static-libcxx: [null, true, false]
        EOF
        conan config install settings_user.yml
        cat > ${{ matrix.host }}.profile << EOF
        include(default)
        [settings]
        arch=skylake
        static-libcxx=True
        build_type=Release
        [conf]
        tools.build.cross_building:can_run=True
        tools.build:cxxflags+=["-march=skylake", "-static-libstdc++"]
        tools.build:cflags+=["-march=skylake"]
        tools.build:sharedlinkflags+=["-static-libstdc++"]
        tools.build:exelinkflags+=["-static-libstdc++"]
        tools.cmake.cmaketoolchain:generator=Ninja Multi-Config
        tools.build:skip_test=True
        EOF
        conan config install ${{ matrix.host }}.profile -tf profiles
    # Dependencies
    - name: Download alpaqa
      run: >
        git clone https://github.com/kul-optec/alpaqa
        --branch new-dl-api --single-branch --depth=1
    - name: Conan create alpaqa
      run: >
        conan create alpaqa
        -pr:h ${{ matrix.host }}.profile
        --build=missing
    - name: Conan install
      run: >
        conan install .
        -pr:h ${{ matrix.host }}.profile
        --build=missing
    # Build
    - name: Build
      run: python3.10 -m build -w
    # Upload
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: alpaqa-python-${{ matrix.host }}
        path: dist/*.whl

  build-macos:
    strategy:
      matrix:
        host: [macos-install]
    runs-on: macos-13
    env:
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      DEVELOPER_DIR: /Applications/Xcode_15.0.1.app/Contents/Developer
      FC: NOTFOUND
    steps:
    # Git clone
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    # Tools
    - name: Install tools
      run: |
        brew install ccache && ccache --version
    # Ccache
    - name: Prepare ccache directory
      id: ccache
      run: |
        echo "CCACHE_DIR=${{ runner.temp }}/.ccache" >> "$GITHUB_ENV"
        echo "ccache-dir=${{ runner.temp }}/.ccache" >> "$GITHUB_OUTPUT"
        mkdir -p "${{ runner.temp }}/.ccache"
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ steps.ccache.outputs.ccache-dir }}
        key: ${{ runner.os }}-python-${{ matrix.host }}-ccache-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-python-${{ matrix.host }}-ccache
        save-always: true
    # Install OpenMP
    - name: Install OpenMP
      run: |
        curl -O https://mac.r-project.org/openmp/openmp-16.0.4-darwin20-Release.tar.gz
        sudo tar fvxz openmp-16.0.4-darwin20-Release.tar.gz -C /
    # Conan
    - name: Install Conan
      id: conan
      run: |
        python3.12 -m pip install -U pip conan build ninja
        echo "conan-home=$(conan config home)" >> "$GITHUB_OUTPUT"
    - name: Cache Conan
      uses: actions/cache@v4
      with:
        path: ${{ steps.conan.outputs.conan-home }}
        key: ${{ runner.os }}-python-${{ matrix.host }}-conan-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-python-${{ matrix.host }}-conan
        save-always: true
    - name: Conan detect
      run: |
        conan --version
        conan profile detect --force
    - name: Conan config
      run: |
        cat > ${{ matrix.host }}.profile << EOF
        include(default)
        [settings]
        build_type=Release
        [conf]
        tools.build.cross_building:can_run=True
        tools.cmake.cmaketoolchain:generator=Ninja Multi-Config
        tools.build:skip_test=True
        EOF
        conan config install ${{ matrix.host }}.profile -tf profiles
    # Dependencies
    - name: Download alpaqa
      run: >
        git clone https://github.com/kul-optec/alpaqa
        --branch new-dl-api --single-branch --depth=1
    - name: Conan create alpaqa
      run: >
        conan create alpaqa
        -pr:h ${{ matrix.host }}.profile
        --build=missing
    - name: Conan install
      run: >
        conan install .
        -pr:h ${{ matrix.host }}.profile
        --build=missing
    # Build
    - name: Build
      run: python3.12 -m build -w
    # Upload
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: alpaqa-python-${{ matrix.host }}
        path: dist/*.whl
